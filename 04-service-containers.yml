trigger: none

resources:
  containers:
  - container: mssql
    image: mcr.microsoft.com/mssql/server:2022-latest
    env:
      ACCEPT_EULA: Y
      #SA_PASSWORD defined in Build stage
      SA_PASSWORD: $(SA_PASSWORD)
      MSSQL_PID: Developer
    ports: 
      - 1433:1433
    options: --name mssql

jobs: 
- job: Build
  container: mcr.microsoft.com/dotnet/sdk:9.0
  pool:
    vmImage: ubuntu-24.04
  variables:
  - name: DOTNET_NOLOGO
    value: true
    readonly: true
  - name: SA_PASSWORD
    value: Normally_This_Is_A_Secret#01!
    readonly: true
  - name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE 
    value: true
    readonly: true
    #Override to create env variable to have control where the global packages are stored for caching: https://learn.microsoft.com/en-us/nuget/consume-packages/managing-the-global-packages-and-cache-folders
  - name: NUGET_PACKAGES
    value: '$(Pipeline.Workspace)/.nuget/packages/'
    readonly: true

  services:
    mssql: mssql
  
  steps:
  - script: apt-get update && apt-get install -y mssql-tools

  - task: Cache@2
    displayName: 'Restore cache for NuGet'
    inputs:
      key: 'nuget | "$(Agent.OS)" | **/packages.lock.json,!**/bin/**,!**/obj/**'
      path: '$(NUGET_PACKAGES)'

  - task: DotNetCoreCLI@2
    displayName: Dotnet restore '**/*.csproj'
    inputs:
      command: 'restore'
      projects: '**/*.csproj'
      restoreArguments: '--locked-mode'
      feedsToUse: 'select'

  - task: DotNetCoreCLI@2
    displayName: Dotnet build
    inputs:
      command: 'build'
      projects: '**/*.csproj'
      arguments: '--no-restore --configuration Release'

  - task: DotNetCoreCLI@2
    inputs:
      command: 'custom'
      custom: 'ef'
      arguments: 'migrations script --output $(Build.ArtifactStagingDirectory)/SQL/db.sql --idempotent --project TodoItems.Api.csproj --context TodoDb --no-build --verbose --configuration Release'
      workingDirectory: '$(Build.SourcesDirectory)/TodoItems.Api'
    displayName: 'Create idempotent SQL'
    env:
      #Pass environment variable dummy. So the migration script will not be created against the InMemory database.
      ASPNETCORE_ENVIRONMENT: 'DUMMY'

  - script: |
        sqlcmd -S 127.0.0.1,1433 -U SA -P '$(SA_PASSWORD)' -Q 'CREATE DATABASE TodoItemsDB' -b
        sqlcmd -S 127.0.0.1,1433 -U SA -P '$(SA_PASSWORD)' -i db.sql -d TodoItemsDB -b
    workingDirectory: '$(Build.ArtifactStagingDirectory)/SQL'
    displayName: 'Create database and tables for unit tests'
    timeoutInMinutes: 1
